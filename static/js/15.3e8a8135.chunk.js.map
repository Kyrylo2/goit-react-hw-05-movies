{"version":3,"file":"static/js/15.3e8a8135.chunk.js","mappings":"kTAEMA,EAAoB,mDACpBC,EAAwB,4CACxBC,EAAyB,sCAEzBC,EAAM,mCAEL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+FACCC,EAAe,CACnBC,OAAQ,CACNC,QAASJ,IAHR,kBAUOK,EAAAA,EAAAA,IAAUR,EAAmBK,GAVpC,uBASOI,EATP,EASDC,KAAQD,QATP,kBAYIA,GAZJ,sCAcG,IAAIE,MAAJ,4BAdH,gFAkBA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA+BC,EAAaC,GAA5C,oFACCT,EAAe,CACnBC,OAAQ,CACNC,QAASJ,EACTY,SAAU,QACVC,MAAOH,EACPC,KAAMA,EACNG,eAAe,IAPd,kBAcOT,EAAAA,EAAAA,IAAUP,EAAuBI,GAdxC,uBAaDK,KAAQD,EAbP,EAaOA,QAGY,IAhBnB,EAagBS,cAbhB,uBAiBK,IAAIP,MAAJ,gDACqCE,EADrC,yBAjBL,iCAsBIJ,GAtBJ,mHA0BA,SAAeU,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,kFACCf,EAAe,CACnBC,OAAQ,CACNC,QAASJ,IAHR,kBAQoBK,EAAAA,EAAAA,IAAA,UAClBN,GADkB,OACOkB,GAC5Bf,GAVC,uBAQKK,EARL,EAQKA,KARL,kBAaIA,GAbJ,sCAeG,IAAIC,MAAJ,8CAfH,gFAmBA,SAAeU,EAAtB,+CAAO,OAAP,oBAAO,WAA+BD,GAA/B,kFACCf,EAAe,CACnBC,OAAQ,CACNC,QAASJ,EACTY,SAAU,UAJT,kBASoBP,EAAAA,EAAAA,IAAA,UAClBN,GADkB,OACOkB,EADP,YAErBf,GAXC,uBASKK,EATL,EASKA,KATL,kBAcIA,GAdJ,sCAgBG,IAAIC,MAAJ,4CAhBH,gFAoBA,SAAeW,EAAtB,+CAAO,OAAP,oBAAO,WAA+BF,GAA/B,kFACCf,EAAe,CACnBC,OAAQ,CACNC,QAASJ,EACTY,SAAU,UAJT,kBASoBP,EAAAA,EAAAA,IAAA,UAClBN,GADkB,OACOkB,EADP,YAErBf,GAXC,uBASKK,EATL,EASKA,KATL,kBAcIA,EAAKD,SAdT,sCAgBG,IAAIE,MAAJ,8CAhBH,gF,+ICzFMY,EAAsBC,EAAAA,GAAAA,IAAH,wVAgBnBC,EAAYD,EAAAA,GAAAA,IAAH,sXAiBTE,EAAaF,EAAAA,GAAAA,IAAH,uGAOVG,EAAYH,EAAAA,GAAAA,IAAH,iEAKTI,EAAYJ,EAAAA,GAAAA,GAAH,2DAKTK,EAAiBL,EAAAA,GAAAA,EAAH,yD,mBCR3B,MAhCA,YAAoC,IAAhBM,EAAe,EAAfA,YAClB,OACE,SAACP,EAAD,UACGO,EAAYC,KAAI,SAAAC,GACf,IAAMC,EAAcD,EAAME,aAAN,6CACsBF,EAAME,cAC5CC,EAEJ,OACE,UAACV,EAAD,YACE,SAACC,EAAD,CAAYU,IAAKH,EAAaI,IAAKL,EAAMM,QACzC,UAACX,EAAD,YACE,SAACC,EAAD,UAAYI,EAAMM,QAClB,SAACT,EAAD,UAAiBG,EAAMO,iBAJXP,EAAMM,KAQzB,KAGN,ECbD,EAda,WACX,IAAQlB,GAAYoB,EAAAA,EAAAA,MAAZpB,QACR,GAAgCqB,EAAAA,EAAAA,UAAS,MAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KASA,OAPAC,EAAAA,EAAAA,YAAU,YACRvB,EAAAA,EAAAA,IAAgBD,GAASyB,MAAK,SAAAC,GAC5B,IAAQC,EAASD,EAATC,KACRJ,EAAYI,EACb,GACF,GAAE,CAAC3B,IAEGsB,IAAY,SAAC,EAAD,CAAUZ,YAAaY,GAC3C,C","sources":["Services/axios-API-service.js","components/CastList/CastList.styled.js","components/CastList/CastList.jsx","pages/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL_TRANDING = 'https://api.themoviedb.org/3/trending/movie/week';\nconst BASE_URL_SEARCH_QUERY = 'https://api.themoviedb.org/3/search/movie';\nconst BASE_URL_MOVIE_DETAILS = 'https://api.themoviedb.org/3/movie/';\n\nconst KEY = 'c5d50af4186bf21fa991895725448c9f';\n\nexport async function getTrandingMovies() {\n  const axiosOptions = {\n    params: {\n      api_key: KEY,\n    },\n  };\n\n  try {\n    const {\n      data: { results },\n    } = await axios.get(BASE_URL_TRANDING, axiosOptions);\n\n    return results;\n  } catch (err) {\n    throw new Error(`Sorry, please try again.`);\n  }\n}\n\nexport async function getFilmsByQuery(searchQuery, page) {\n  const axiosOptions = {\n    params: {\n      api_key: KEY,\n      language: 'en-US',\n      query: searchQuery,\n      page: page,\n      include_adult: false,\n    },\n  };\n\n  try {\n    const {\n      data: { results, total_results },\n    } = await axios.get(BASE_URL_SEARCH_QUERY, axiosOptions);\n\n    if (total_results === 0) {\n      throw new Error(\n        `Sorry, there are no pictures for the \"${searchQuery}\". Please try again.`\n      );\n    }\n\n    return results;\n  } catch (err) {}\n}\n\nexport async function getMovieDetails(movieId) {\n  const axiosOptions = {\n    params: {\n      api_key: KEY,\n    },\n  };\n\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL_MOVIE_DETAILS}${movieId}`,\n      axiosOptions\n    );\n\n    return data;\n  } catch (err) {\n    throw new Error(`Sorry, there is no movie details available`);\n  }\n}\n\nexport async function getMovieCredits(movieId) {\n  const axiosOptions = {\n    params: {\n      api_key: KEY,\n      language: 'en-US',\n    },\n  };\n\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL_MOVIE_DETAILS}${movieId}/credits`,\n      axiosOptions\n    );\n\n    return data;\n  } catch (err) {\n    throw new Error(`Sorry, there is no movie casts available`);\n  }\n}\n\nexport async function getMovieReviews(movieId) {\n  const axiosOptions = {\n    params: {\n      api_key: KEY,\n      language: 'en-US',\n    },\n  };\n\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL_MOVIE_DETAILS}${movieId}/reviews`,\n      axiosOptions\n    );\n\n    return data.results;\n  } catch (err) {\n    throw new Error(`Sorry, there is no movie reviews available`);\n  }\n}\nexport const API = {\n  getTrandingMovies,\n  getFilmsByQuery,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n};\n","import styled from 'styled-components';\n\nexport const ActorsGridContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(5, minmax(0, 1fr));\n  grid-gap: 20px;\n  justify-items: center;\n  margin: 40px;\n\n  @media (max-width: 1024px) {\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n  }\n\n  @media (max-width: 768px) {\n    grid-template-columns: repeat(1, minmax(0, 1fr));\n  }\n`;\n\nexport const ActorCard = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n  transition: 0.3s;\n  width: 100%;\n  max-width: 300px;\n\n  &:hover {\n    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n    transform: scale(1.05);\n    background-color: #f2f2f2;\n    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.3);\n  }\n`;\n\nexport const ActorImage = styled.img`\n  max-width: 100%;\n  min-width: 100%;\n  height: auto;\n  object-fit: cover;\n`;\n\nexport const ActorInfo = styled.div`\n  text-align: center;\n  padding: 10px;\n`;\n\nexport const ActorName = styled.h3`\n  margin: 0;\n  font-size: 1.2em;\n`;\n\nexport const ActorCharacter = styled.p`\n  margin: 0;\n  font-size: 1em;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ActorsGridContainer,\n  ActorCard,\n  ActorImage,\n  ActorInfo,\n  ActorName,\n  ActorCharacter,\n} from './CastList.styled';\nimport defaultImage from '../../images/no-poster1.webp';\n\nfunction CastList({ castListArr }) {\n  return (\n    <ActorsGridContainer>\n      {castListArr.map(actor => {\n        const posterImage = actor.profile_path\n          ? `https://image.tmdb.org/t/p/original${actor.profile_path}`\n          : defaultImage;\n\n        return (\n          <ActorCard key={actor.name}>\n            <ActorImage src={posterImage} alt={actor.name} />\n            <ActorInfo>\n              <ActorName>{actor.name}</ActorName>\n              <ActorCharacter>{actor.character}</ActorCharacter>\n            </ActorInfo>\n          </ActorCard>\n        );\n      })}\n    </ActorsGridContainer>\n  );\n}\n\nCastList.propTypes = {\n  castListArr: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default CastList;\n","import { getMovieCredits } from 'Services/axios-API-service';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport CastList from 'components/CastList/CastList';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castList, setCastList] = useState(null);\n\n  useEffect(() => {\n    getMovieCredits(movieId).then(response => {\n      const { cast } = response;\n      setCastList(cast);\n    });\n  }, [movieId]);\n\n  return castList && <CastList castListArr={castList} />;\n};\n\nexport default Cast;\n"],"names":["BASE_URL_TRANDING","BASE_URL_SEARCH_QUERY","BASE_URL_MOVIE_DETAILS","KEY","getTrandingMovies","axiosOptions","params","api_key","axios","results","data","Error","getFilmsByQuery","searchQuery","page","language","query","include_adult","total_results","getMovieDetails","movieId","getMovieCredits","getMovieReviews","ActorsGridContainer","styled","ActorCard","ActorImage","ActorInfo","ActorName","ActorCharacter","castListArr","map","actor","posterImage","profile_path","defaultImage","src","alt","name","character","useParams","useState","castList","setCastList","useEffect","then","response","cast"],"sourceRoot":""}