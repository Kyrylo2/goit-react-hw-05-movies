{"version":3,"file":"static/js/859.dc0236e2.chunk.js","mappings":"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","sources":["Services/axios-API-service.js","components/MoviesGrid/MoviesGrid.styled.js","components/MovieGridItem/MovieGridItem.styled.js","components/MovieGridItem/MovieGridItem.jsx","components/MoviesGrid/MoviesGrid.jsx","pages/Home/Home.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL_TRANDING = 'https://api.themoviedb.org/3/trending/movie/week';\nconst BASE_URL_SEARCH_QUERY = 'https://api.themoviedb.org/3/search/movie';\nconst BASE_URL_MOVIE_DETAILS = 'https://api.themoviedb.org/3/movie/';\n\nconst KEY = 'c5d50af4186bf21fa991895725448c9f';\n\nexport async function getTrandingMovies() {\n  const axiosOptions = {\n    params: {\n      api_key: KEY,\n    },\n  };\n\n  try {\n    const {\n      data: { results, total_results },\n      status,\n    } = await axios.get(BASE_URL_TRANDING, axiosOptions);\n    console.log(status, total_results);\n    console.log(results);\n    return results;\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport async function getFilmsByQuery(searchQuery, page) {\n  const axiosOptions = {\n    params: {\n      api_key: KEY,\n      language: 'en-US',\n      query: searchQuery,\n      page: page,\n      include_adult: false,\n    },\n  };\n\n  try {\n    const {\n      data: { results, total_results },\n    } = await axios.get(BASE_URL_SEARCH_QUERY, axiosOptions);\n\n    if (total_results === 0) {\n      throw new Error(\n        `Sorry, there are no pictures for the \"${searchQuery}\". Please try again.`\n      );\n    }\n\n    return results;\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport async function getMovieDetails(movieId) {\n  const axiosOptions = {\n    params: {\n      api_key: KEY,\n    },\n  };\n\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL_MOVIE_DETAILS}${movieId}`,\n      axiosOptions\n    );\n\n    console.log(data);\n    return data;\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport async function getMovieCredits(movieId) {\n  const axiosOptions = {\n    params: {\n      api_key: KEY,\n      language: 'en-US',\n    },\n  };\n\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL_MOVIE_DETAILS}${movieId}/credits`,\n      axiosOptions\n    );\n\n    return data;\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport async function getMovieReviews(movieId) {\n  const axiosOptions = {\n    params: {\n      api_key: KEY,\n      language: 'en-US',\n    },\n  };\n\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL_MOVIE_DETAILS}${movieId}/reviews`,\n      axiosOptions\n    );\n\n    return data.results;\n  } catch (err) {\n    console.log(err);\n  }\n}\nexport const API = {\n  getTrandingMovies,\n  getFilmsByQuery,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n};\n","import styled from 'styled-components';\n\nexport const MovieGrid = styled.section`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 2rem;\n`;\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Card = styled(NavLink)`\n  position: relative;\n  width: 300px;\n  height: 450px;\n  overflow: hidden;\n  background-color: #fff;\n  border-radius: 10px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease;\n\n  &:hover {\n    transform: translateY(-10px);\n    box-shadow: 0 12px 16px rgba(0, 0, 0, 0.2);\n  }\n`;\n\nexport const Poster = styled.img`\n  display: block;\n  max-width: 100%;\n  height: auto;\n  box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.3);\n  border-radius: 10px;\n  position: relative;\n\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nexport const RatingCircle = styled.div`\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  background-color: ${({ rating }) => {\n    if (rating >= 7) return 'green';\n    if (rating >= 4) return 'orange';\n    return 'red';\n  }};\n  color: white;\n  font-size: 14px;\n  font-weight: bold;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  top: 0;\n  right: 0;\n  margin: 10px;\n`;\n\nexport const Overlay = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  /* padding: 1rem; */\n  background-color: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  transform: translateY(100%);\n  transition: all 0.3s ease;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n\n  ${Card}:hover & {\n    transform: translateY(0);\n  }\n`;\n\nexport const Title = styled.h2`\n  font-size: 1.5rem;\n  margin-top: 1rem;\n  margin-bottom: 0;\n  text-align: center;\n`;\n\n// export const Rating = styled.span`\n//   position: absolute;\n//   top: -10px;\n//   right: -10px;\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n//   width: 40px;\n//   height: 40px;\n//   font-size: 1.2rem;\n//   font-weight: bold;\n//   border-radius: 50%;\n//   background-color: ${({ rating }) => {\n//     if (rating >= 7) return '#3f9d2f';\n//     if (rating >= 5) return '#f3c719';\n//     return '#db0a00';\n//   }};\n//   color: #fff;\n// `;\n\nexport const Year = styled.p`\n  font-size: 1rem;\n  margin-top: 0;\n  margin-bottom: 1rem;\n  text-align: center;\n`;\n","import {\n  Title,\n  Card,\n  Overlay,\n  Poster,\n  RatingCircle,\n  Year,\n} from './MovieGridItem.styled';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport defaultImage from 'images/no-poster1.webp';\n\nconst MoviesGridItem = ({ movie }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      <Card\n        key={movie.id}\n        to={`/movies/${movie.id}`}\n        state={{ from: location }}\n      >\n        <Poster\n          src={\n            movie.poster_path\n              ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\n              : defaultImage\n          }\n          alt={movie.title}\n        />\n        <RatingCircle rating={movie.vote_average}>\n          {movie.vote_average}\n        </RatingCircle>\n        <Overlay>\n          <Title>{movie.title}</Title>\n          <Year>{movie.release_date}</Year>\n        </Overlay>\n      </Card>\n    </>\n  );\n};\n\nMoviesGridItem.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    poster_path: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nexport default MoviesGridItem;\n","import { MovieGrid } from './MoviesGrid.styled';\nimport MoviesGridItem from 'components/MovieGridItem/MovieGridItem';\n\nconst MoviesGrid = ({ moviesArr }) => {\n  console.log(moviesArr);\n  return (\n    <MovieGrid>\n      {moviesArr.map(movie => (\n        <MoviesGridItem movie={movie} key={movie.id} />\n      ))}\n    </MovieGrid>\n  );\n};\nexport default MoviesGrid;\n","import { useState, useEffect } from 'react';\nimport { getTrandingMovies } from 'Services/axios-API-service';\n\nimport MovieGrid from '../../components/MoviesGrid/MoviesGrid';\n\nconst Home = () => {\n  const [results, setResults] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const result = await getTrandingMovies();\n        setResults(result);\n      } catch (e) {}\n    }\n    fetchData();\n  }, []);\n\n  return (\n    <>\n      <h1>Tranding movies</h1>\n      {results && <MovieGrid moviesArr={results} />}\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["BASE_URL_TRANDING","BASE_URL_SEARCH_QUERY","BASE_URL_MOVIE_DETAILS","KEY","getTrandingMovies","axiosOptions","params","api_key","axios","data","results","total_results","status","console","log","getFilmsByQuery","searchQuery","page","language","query","include_adult","Error","getMovieDetails","movieId","getMovieCredits","getMovieReviews","MovieGrid","styled","Card","NavLink","Poster","RatingCircle","rating","Overlay","Title","Year","movie","location","useLocation","to","id","state","from","src","poster_path","defaultImage","alt","title","vote_average","release_date","moviesArr","map","useState","setResults","useEffect","result","fetchData"],"sourceRoot":""}